# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build and Deploy

#on:
  #pull_request:
  #  branches: [ "main" ]
#  workflow_call:
on:
  push:
   branches: [ "feature/angularCICD-US40-WI50" ]

  workflow_dispatch:
env:
  dev: 'dev'
  prod: 'prod'
  staging: 'staging'
jobs:

  setup-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: "Setup PNPM"
      uses: ./.github/actions/setup-pnpm
    - run: pnpm build
    - name: Generate build artifacts
      run: |
          mkdir generated
          cp -R dist generated
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: generated-artifacts
        path: generated

  test-code:
    needs: setup-build
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    steps:
      #- name: Checkout code
      #  uses: actions/checkout@v3
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: generated-artifacts
          path: generated
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
  
        # - name: Run Codacy Analysis
      #   uses: codacy/codacy-analysis-cli-action@v4.3.0
  
  # test:
  #  needs: setup-build
  #  runs-on: ubuntu-latest
  #  steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #     with:
  #        # Disabling shallow clone is recommended for improving relevancy of reporting for sonarQube
  #        fetch-depth: 0
  #        persist-credentials: false
  #   - name: SonarQube Scan
  #     uses: kitabisa/sonarqube-action@v1.2.0
  #     with:
  #       host: ${{ secrets.SONARQUBE_HOST }}
  #       login: ${{ secrets.SONARQUBE_TOKEN }}
  
  deploy-dev:
     needs: test-code
     uses: ./.github/workflows/deploy.yml
     with:
         CI_ENV: 'dev'
         ARTIFACT_NAME: 'generated-artifacts'
     secrets:
           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN}}
           AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
           AWS_S3_BUCKET_ANGULAR: ${{ secrets.AWS_S3_BUCKET_ANGULAR }}
           TOKEN_API: ${{ secrets.TOKEN_API }}
  deploy-staging:
     needs: deploy-dev
     uses: ./.github/workflows/deploy.yml
     with:
         CI_ENV: 'staging'
         ARTIFACT_NAME: 'generated-artifacts'
     secrets:
           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN}}
           AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
           AWS_S3_BUCKET_ANGULAR: ${{ secrets.AWS_S3_BUCKET_ANGULAR }}
           TOKEN_API: ${{ secrets.TOKEN_API }}
  deploy-prod:
      needs: deploy-staging
      uses: ./.github/workflows/deploy.yml
      with:
          CI_ENV: 'prod'
          ARTIFACT_NAME: 'generated-artifacts'
      secrets:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN}}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            AWS_S3_BUCKET_ANGULAR: ${{ secrets.AWS_S3_BUCKET_ANGULAR }}
            TOKEN_API: ${{ secrets.TOKEN_API }}